/* Generated By:JavaCC: Do not edit this line. ObjParser.java */
package com.quew8.geng.objparser;

import com.quew8.geng.geometry.*;
import com.quew8.gmath.*;
import java.io.*;
import java.util.ArrayList;
import java.util.HashMap;

public class ObjParser implements ObjParserConstants {
    ArrayList<Vector> vertices = new ArrayList<Vector>();
    ArrayList<Vector> normals = new ArrayList<Vector>();
    ArrayList<float[]> texCoordss = new ArrayList<float[]>();
    ArrayList<Vertex[]> facess = new ArrayList<Vertex[]>();

    public void parse() {
        try {
            Start();
        } catch(ParseException ex) {
            throw new RuntimeException(ex);
        }
    }

    public Mesh[] getMesh(TextureArea textureArea) {
        Mesh[] meshes = new Mesh[facess.size()];
        for(int i = 0; i < meshes.length; i++) {
            meshes[i] = new Mesh(facess.get(i), textureArea);
        }
        return meshes;
    }

  final public void Start() throws ParseException {
    Line();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EOL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(EOL);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMENT:
      case VERTEX:
      case TEX_COORD:
      case NORMAL:
      case FACE:
        Line();
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
    }
    jj_consume_token(0);
  }

  final public void Line() throws ParseException {
    Vector v;
    float[] fa;
    Vertex[] va;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMENT:
      jj_consume_token(COMMENT);
      break;
    case VERTEX:
      v = Vertex();
          vertices.add(v);
      break;
    case TEX_COORD:
      fa = TexCoord();
          texCoordss.add(fa);
      break;
    case NORMAL:
      v = Normal();
          normals.add(v);
      break;
    case FACE:
      va = Face();
          facess.add(va);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Vector Vertex() throws ParseException {
    Vector v;
    jj_consume_token(VERTEX);
    v = Vector();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_FLOAT:
      Float();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public Vector Normal() throws ParseException {
    Vector v;
    jj_consume_token(NORMAL);
    v = Vector();
        {if (true) return v;}
    throw new Error("Missing return statement in function");
  }

  final public float[] TexCoord() throws ParseException {
    float u, v;
    jj_consume_token(TEX_COORD);
    u = Float();
    v = Float();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM_FLOAT:
      Float();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
        {if (true) return new float[]{u, v};}
    throw new Error("Missing return statement in function");
  }

  final public Vertex[] Face() throws ParseException {
    ArrayList<Vertex> faces = new ArrayList<Vertex>();
    int vi, vni = 0, vti = 0;
    jj_consume_token(FACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUM_INT:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      vi = Int();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SLASH:
        jj_consume_token(SLASH);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUM_INT:
          vti = Int();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SLASH:
            jj_consume_token(SLASH);
            vni = Int();
            break;
          default:
            jj_la1[6] = jj_gen;
            ;
          }
          break;
        case SLASH:
          jj_consume_token(SLASH);
          vni = Int();
          break;
        default:
          jj_la1[7] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[8] = jj_gen;
        ;
      }
            Vector position = null;
            if(vi - 1 < 0 || vi - 1 >= vertices.size()) {
                {if (true) throw new ArrayIndexOutOfBoundsException("Position " + vi);}
            } else {
                position = vertices.get(vi - 1);
            }
            Vector normal = null;
            if(vni == 0) {
                normal = new Vector(0, 1, 0);
            } else if(vni - 1 < 0 || vni - 1 >= normals.size()) {
                {if (true) throw new ArrayIndexOutOfBoundsException("Normal " + vni);}
            } else {
                normal = normals.get(vni - 1);
            }
            float[] texCoords = null;
            if(vti == 0) {
                texCoords = new float[]{0, 0};
            } else if(vti - 1 < 0 || vti - 1 >= texCoordss.size()) {
                {if (true) throw new ArrayIndexOutOfBoundsException("Tex Coords " + vti);}
            } else {
                texCoords = texCoordss.get(vti - 1);
            }
            faces.add(new Vertex(position, normal, texCoords[0], texCoords[1]));
    }
        {if (true) return faces.toArray(new Vertex[faces.size()]);}
    throw new Error("Missing return statement in function");
  }

  final public Vector Vector() throws ParseException {
    float x, y, z;
    x = Float();
    y = Float();
    z = Float();
        {if (true) return new Vector(x, y, z);}
    throw new Error("Missing return statement in function");
  }

  final public float Float() throws ParseException {
    Token t;
    t = jj_consume_token(NUM_FLOAT);
        {if (true) return Float.parseFloat(t.toString());}
    throw new Error("Missing return statement in function");
  }

  final public int Int() throws ParseException {
    Token t;
    t = jj_consume_token(NUM_INT);
        {if (true) return Integer.parseInt(t.toString());}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ObjParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10,0x788,0x788,0x2000,0x2000,0x4000,0x40,0x4040,0x40,};
   }

  /** Constructor with InputStream. */
  public ObjParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ObjParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ObjParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ObjParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ObjParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ObjParser(ObjParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ObjParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
